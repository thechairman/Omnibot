#configurable
DYNAMIC_LOADING = NO
LOAD_MODE=${}
#varibles to store program names
CC = g++ 
AR = ar

#location of the minibot project and product library
MINIBOT_PATH = ../Minibot
MINIBOT_BUILD = ${MINIBOT_PATH}/build/
MINIBOT_LIB = ${MINIBOT_BUILD}/build/libMinibot.a

#location of the omnibot plugins
PLUGIN_DIR = ./plugins

LIBPATH = -L ../Minibot/build \
	  -L ./build/Threads \
	  -L ./build/OmniComm \
	  -L ./plugins

LIBS = -lOmniThread \
       -lOmniComm \
       -lpthread \
       -lMinibot \
       -lcurl	\
       -lrt	\
       -ldl 

INCLUDES = -I ./include \
	   -I ./include/Core \
	   -I ./include/Threads \
	   -I ./include/OmniComm \
	   -I ../Minibot/include \
	   -I ./plugins

#source code directories in the Omnibot project
SRC_CORE = ./src/Core
SRC_THREAD = ./src/Threads
SRC_OMNICOMM = ./src/OmniComm

#build directories
BUILD = ./build
BUILD_CORE = ./build/Core
BUILD_THREADS = ./build/Threads
BUILD_OMNICOMM = ./build/OmniComm

#names of products to be produced by this 
START_SCRIPT_NAME = start_omnibot
EXECUTABLE = ${BUILD}/Omnibot
PLUGINS = plugins
MINIBOT = Minibot
THREAD_LIB = ${BUILD_THREADS}/libOmniThread.a
OMNICOMM_LIB =  ${BUILD_OMNICOMM}/libOmniComm.a
START_SCRIPT = ${BUILD}/${START_SCRIPT_NAME}

#These are the objects that the OmniComm library is built from
OMNICOMM_OBJS = ${BUILD_OMNICOMM}/OmniCommSignalQueue.o\
		${BUILD_OMNICOMM}/OmniCommChannel.o\
		${BUILD_OMNICOMM}/OmniCommChannelManager.o\
		${BUILD_OMNICOMM}/LinuxOmniCommSignalQueue.o

#These are the objects that the OmniThread library is built from
THREAD_OBJS =${BUILD_THREADS}/OmniThreadPool.o\
	     ${BUILD_THREADS}/OmniThread.o\
	     ${BUILD_THREADS}/OmniMutex.o\
	      ${BUILD_THREADS}/pthread_ThreadPool.o\
	      ${BUILD_THREADS}/pthread_PooledThread.o\
	      ${BUILD_THREADS}/pthread_Thread.o\
	      ${BUILD_THREADS}/pthread_Mutex.o

#These are the core objs that the application is built from
CORE_OBJS = ${BUILD_CORE}/omnibot.o\
	    ${BUILD_CORE}/PluginFactory.o\
	    ${BUILD_CORE}/PluginManager.o\
	    ${BUILD_CORE}/NickManager.o\
	    ${BUILD_CORE}/StaticPluginFactory.o\
	    ${BUILD_CORE}/LinuxPluginFactory.o\
	    ${BUILD_CORE}/PluginUtils.o\
	    ${BUILD_CORE}/PluginAttrs.o\
	    ${BUILD_CORE}/OmniPluginInterface.o\
	    ${BUILD_CORE}/OmniConfigParser.o\
	    ${BUILD_CORE}/OmniBlocker.o\
	    ${BUILD_CORE}/posix_OmniBlocker.o\
	    ${BUILD_CORE}/main.o\
	    ${BUILD_CORE}/OmniJoinCmd.o\
	    ${BUILD_CORE}/OmniLeaveCmd.o\
	    ${BUILD_CORE}/OmniQuitCmd.o\
	    ${BUILD_CORE}/OmniLoadCmd.o\
	    ${BUILD_CORE}/OmniDropCmd.o\
	    ${BUILD_CORE}/OmniListCmd.o\
	    ${BUILD_CORE}/OmniCommand.o\
	    ${BUILD_CORE}/OmniCommandBuilder.o\
	    ${BUILD_CORE}/OmniCfgReader.o



#These are the elemets that need to be cleaned up on a "make clean"
CLEAN_STR = ${BUILD_THREADS}/*.d \
            ${BUILD_THREADS}/*.o \
	    ${BUILD_OMNICOMM}/*.d \
	    ${BUILD_OMNICOMM}/*.o \
	    ${BUILD_CORE}/*.d \
	    ${BUILD_CORE}/*.o \
	    ${THREAD_LIB} \
	    ${OMNICOMM_LIB} \
	    ${EXECUTABLE} \
	    ${START_SCRIPT}  



#################################################################################
#		These are only needed until dynamic loading is implement
#################################################################################
PLUGIN_OBJS = ${PLUGIN_DIR}/hurlbot.o\
	      ${PLUGIN_DIR}/bashbot.o\
	      ${PLUGIN_DIR}/qdbbot.o\
	      ${PLUGIN_DIR}/tomebot.o\
	      ${PLUGIN_DIR}/8ballbot.o\
	      ${PLUGIN_DIR}/karmabot.o\
	      ${PLUGIN_DIR}/numberwangbot.o


#################################################################################

PLUGIN_LIBS = -lhurlbot\
	      -lbashbot\
	      -lqdbbot\
	      -ltomebot\
	      -l8ballbot\
	      -lkarmabot\
	      -lwordsbot\
	      -lnumberwangbot

	      
#ifeq(${DYNAMIC_LOADING}, YES)
#	LOAD_MODE = -DDYNAMIC_LOADING
#else
#	LOAD_MODE = ${}
#	LIBS = ${LIBS} ${PLUGIN_LIBS}
#endif


#list of the products generated by "all"
PRODUCTS = ${PLUGINS}\
	   ${THREAD_LIB}\
	   ${OMNICOMM_LIB}\
	   ${MINIBOT}\
	   ${EXECUTABLE}

ifeq (${DYNAMIC_LOADING}, YES)
	LOAD_MODE=-DDYNAMIC_LOADING
else
	LIBS+=${PLUGIN_LIBS}
	PRODUCTS+=${START_SCRIPT}
endif

all: ${PRODUCTS}

-include ${BUILD_CORE}*.d

-include ${BUILD_THREADS}*.d

-include ${BUILD_OMNICOMM}*.d

-include ${PLUGIN_DIR}*.d

-include ${MINIBOT_BUILD}*.d

#build the actual executable.
${EXECUTABLE}: ${THREAD_LIB} ${OMNICOMM_LIB} ${CORE_OBJS} ${PLUGINS} ${MINIBOT}
	@echo "Building: $@"
	${CC} -o"$@" ${LIBPATH} ${LIBS} ${CORE_OBJS} ${LIBS}
	@echo "Done building: $@"
	@echo " "

#build the thread library
${THREAD_LIB}: ${THREAD_OBJS}
	@echo "Building: $@"
	${AR} -rv $@ ${THREAD_OBJS}
	@echo "Done building: $@"
	@echo ' '

#build the thread library
${OMNICOMM_LIB}: ${OMNICOMM_OBJS}
	@echo "Building: $@"
	${AR} -rv $@ ${OMNICOMM_OBJS}
	@echo "Done building: $@"
	@echo ' '

#invoke the make file in the ./plugins directory
.PHONY: ${PLUGINS}

${PLUGINS}:
	${MAKE} -C ${PLUGIN_DIR} all DYNAMIC_LOADING=${DYNAMIC_LOADING}

#invoke make for the Minibot directory
.PHONY: ${MINIBOT}

${MINIBOT}:
	${MAKE} -C ${MINIBOT_PATH} 

${START_SCRIPT}:
	@echo '#!/bin/sh'>> ${BUILD}/${START_SCRIPT_NAME}
	@echo ''>> ${BUILD}/${START_SCRIPT_NAME}
	@echo 'PLUGIN_PATH=$$PWD/.${PLUGIN_DIR}'>> ${BUILD}/${START_SCRIPT_NAME}
	@echo 'export LD_LIBRARY_PATH=$$PLUGIN_PATH'>> ${BUILD}/${START_SCRIPT_NAME}
	@echo './Omnibot'>> ${BUILD}/${START_SCRIPT_NAME}
	@chmod +x  ${BUILD}/${START_SCRIPT_NAME}


#pattern rule for objects in thread
${BUILD_THREADS}/%.o:${SRC_THREAD}/%.cpp
	@mkdir -p ${BUILD_THREADS}
	@echo 'Building file: $<'
	@echo 'Invoking: GCC C++ Compiler'
	g++ ${INCLUDES} -D_GLIBCXX_DEBUG -g -O0 -Wall -c -fmessage-length=0 -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@:%.o=%.d)" -o"$@" "$<"
	@echo 'Finished building: $<'
	@echo ' '

#pattern rule for objectes in OmniComm
${BUILD_OMNICOMM}/%.o:${SRC_OMNICOMM}/%.cpp
	@mkdir -p ${BUILD_OMNICOMM}
	@echo 'Building file: $<'
	@echo 'Invoking: GCC C++ Compiler'
	g++ ${INCLUDES} -D_GLIBCXX_DEBUG -g -O0 -Wall -c -fmessage-length=0 -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@:%.o=%.d)" -o"$@" "$<"
	@echo 'Finished building: $<'
	@echo ' '

#pattern rule for objectes in core
${BUILD_CORE}/%.o:${SRC_CORE}/%.cpp
	@mkdir -p ${BUILD_CORE}
	@echo 'Building file: $<'
	@echo 'Invoking: GCC C++ Compiler'
	g++ ${INCLUDES} -D_GLIBCXX_DEBUG ${LOAD_MODE} -g -O0 -Wall -c -fmessage-length=0 -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@:%.o=%.d)" -o"$@" "$<"
	@echo 'Finished building: $<'
	@echo ' '

#Obligitory clean rull
.PHONY: clean
clean:
	${RM} ${CLEAN_STR}
#${RM} ${BUILD_THREADS}/*.d ${BUILD_THREADS}/*.o ${BUILD_OMNICOMM}/*.d ${BUILD_OMNICOMM}/*.o ${BUILD_CORE}/*.d ${BUILD_CORE}/*.o ${THREAD_LIB} ${OMNICOMM_LIB} ${EXECUTABLE}

.PHONY: cleanall

cleanall: clean
	${MAKE} -C ${MINIBOT_PATH} clean
	${MAKE} -C ${PLUGIN_DIR} clean

.PHONY: rebuild

rebuild: cleanall all

